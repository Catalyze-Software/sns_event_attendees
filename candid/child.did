type ApiError = variant {
  SerializeError : ErrorMessage;
  DeserializeError : ErrorMessage;
  NotFound : ErrorMessage;
  ValidationError : vec ValidationResponse;
  CanisterAtCapacity : ErrorMessage;
  UpdateRequired : UpdateMessage;
  Unauthorized : ErrorMessage;
  Unexpected : ErrorMessage;
  BadRequest : ErrorMessage;
};
type Attendee = record {
  "principal" : principal;
  invites : vec record { principal; Invite };
  joined : vec record { principal; Join };
};
type ErrorMessage = record {
  tag : text;
  message : text;
  inputs : opt vec text;
  location : text;
};
type HttpHeader = record { value : text; name : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Invite = record {
  updated_at : nat64;
  group_identifier : principal;
  invite_type : InviteType;
  created_at : nat64;
};
type InviteAttendeeResponse = record {
  "principal" : principal;
  group_identifier : principal;
  attendee_identifier : principal;
  invite_type : InviteType;
  event_identifier : principal;
};
type InviteType = variant { None; OwnerRequest; UserRequest };
type Join = record {
  updated_at : nat64;
  group_identifier : principal;
  created_at : nat64;
};
type JoinedAttendeeResponse = record {
  "principal" : principal;
  group_identifier : principal;
  attendee_identifier : principal;
  event_identifier : principal;
};
type Metadata = record {
  updated_at : nat64;
  name : text;
  max_entries : nat64;
  current_entry_id : opt nat64;
  created_at : nat64;
  used_data : nat64;
  cycles : nat64;
  is_available : bool;
  identifier : nat64;
  entries_count : nat64;
  parent : principal;
};
type Result = variant { Ok : record { principal; Attendee }; Err : ApiError };
type Result_1 = variant { Ok; Err : ApiError };
type Result_2 = variant { Ok; Err : bool };
type Result_3 = variant { Ok : vec JoinedAttendeeResponse; Err : ApiError };
type Result_4 = variant { Ok : vec InviteAttendeeResponse; Err : ApiError };
type Result_5 = variant { Ok : Metadata; Err : ApiError };
type UpdateMessage = record { canister_principal : principal; message : text };
type ValidationResponse = record { field : text; message : text };
service : (principal, text, nat64) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  accept_cycles : () -> (nat64);
  accept_owner_request_event_invite : (principal) -> (Result);
  accept_user_request_event_invite : (
      principal,
      principal,
      principal,
      principal,
    ) -> (Result);
  add_entry_by_parent : (vec nat8) -> (Result_1);
  add_owner_as_attendee : (principal, principal, principal) -> (Result_2);
  get_attending_from_principal : (principal) -> (Result_3) query;
  get_chunked_invite_data : (principal, nat64, nat64) -> (
      vec nat8,
      record { nat64; nat64 },
    ) query;
  get_chunked_join_data : (principal, nat64, nat64) -> (
      vec nat8,
      record { nat64; nat64 },
    ) query;
  get_event_attendees : (principal) -> (Result_3) query;
  get_event_attendees_count : (vec principal) -> (
      vec record { principal; nat64 },
    ) query;
  get_event_invites : (principal, principal, principal) -> (Result_4);
  get_event_invites_count : (vec principal) -> (
      vec record { principal; nat64 },
    ) query;
  get_metadata : () -> (Result_5) query;
  get_self : () -> (Result) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  invite_to_event : (principal, principal, principal, principal) -> (Result);
  join_event : (principal, principal) -> (Result);
  leave_event : (principal) -> (Result_1);
  migration_add_event_attendees : (vec record { principal; Attendee }) -> ();
  remove_attendee_from_event : (principal, principal, principal, principal) -> (
      Result_1,
    );
  remove_attendee_invite_from_event : (
      principal,
      principal,
      principal,
      principal,
    ) -> (Result_1);
  remove_invite : (principal) -> (Result_1);
  sanity_check : () -> (text) query;
}